<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                  http://www.springframework.org/schema/beans/spring-beans.xsd
                  http://www.springframework.org/schema/mvc
                  http://www.springframework.org/schema/mvc/spring-mvc.xsd
                  http://www.springframework.org/schema/context
                  http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">

    <!--
        ① 配置哪些链接可以放行(没有认证通过也可以访问的资源)
        security="none"：没有权限
        pattern="/login.html"：没有任何权限，可以访问login.html
      -->
<!--    <security:http security="none" pattern="/login.html"></security:http>-->

    <!--
    ② 定义哪些链接不可以放行(必须通过认证才能访问的资源)，及需要有角色，有权限才可以放行访问资源
    <security:http auto-config="true" use-expressions="true">
          auto-config="true":开启自动配置 由springsecurity提供登录页面，提供登录的url地址，退出的url地址
          use-expressions="true"：使用表达式的方式控制权限
             security:intercept-url：定义哪些链接不可以放行，需要当前角色和权限才能放行
                pattern="/**"：要求系统中的所有资源，都必须通过角色和权限才能访问
                access：指定角色和权限
                   如果使用表达式use-expressions="true"
                       access="hasRole('ROLE_ADMIN')：表示具有ROLE_ADMIN的角色才能访问系统的资源
                   如果不使用表达式use-expressions="false"
                       access="ROLE_ADMIN：表示具有ROLE_ADMIN的角色才能访问系统的资源
    -->



    <security:http security="none" pattern="/login.html"/>

    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/css/**"/>

    <!--
      <security:form-login :定义登录表信息
      login-page="/login.html" ：表示指定登录表页面
     username-parameter="username" ：使用用户名的名称 ，默认是username
     password-parameter="password" ：使用登录名的密码，默认是password
     login-processing-url="/login.do" ：表示登录的URL地址
     default-target-url="/index.html" ：登陆成功后跳转的页面
     authentication-failure-url="/login.html" ：认证失败后跳转的url地址，失败后指定/login.html
     always-use-default-target="true"/> ：登录成功后，始终跳转到default-target-url指定的地址，即登录成功的默认地址

     -->
    <security:http auto-config="true" use-expressions="true">
<!--        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"></security:intercept-url>-->
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/index.html"  access="isAuthenticated()" />
        <security:intercept-url pattern="/aa.html"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/bb.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/cc.html"  access="hasRole('ROLE_ADMIN')" />

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面-->
        <security:intercept-url pattern="/dd.html"  access="hasRole('ABC')" />




        <security:form-login login-page="/login.html"
                             username-parameter="username"
                             password-parameter="password"
                             login-processing-url="/login.do"
                             default-target-url="/index.html"
                             authentication-failure-url="/login.html"
                             always-use-default-target="true"/>
        <!--
                 csrf：对应CsrfFilter过滤器
                 disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
             -->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"/>

        <security:csrf disabled="true"></security:csrf>
    </security:http>

    <!--
     三：认证管理，定义登录账号名和密码，并授予访问的角色、权限
     authentication-manager：认证管理器，用于处理认证操作
 -->
    <security:authentication-manager>
        <!-- authentication-provider：认证提供者，执行具体的认证逻辑 -->
        <security:authentication-provider user-service-ref="userService">
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>



    <!--配置密码加密对象-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
<!--    配置组件扫描，用于扫描Controller-->
    <context:component-scan base-package="com.atguigu"/>
    <mvc:annotation-driven/>

    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled"/>
</beans>